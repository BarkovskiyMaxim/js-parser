/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var jsParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,35],$V1=[1,7],$V2=[1,13],$V3=[1,22],$V4=[1,14],$V5=[1,19],$V6=[1,15],$V7=[1,21],$V8=[1,23],$V9=[1,30],$Va=[1,32],$Vb=[1,33],$Vc=[1,36],$Vd=[1,34],$Ve=[1,25],$Vf=[1,18],$Vg=[5,10],$Vh=[5,9,10,11,14,17,19,21,26,27,28,31,32,33,34,35,37,39,40,41,43,44,48,53,54,57],$Vi=[2,53],$Vj=[1,42],$Vk=[1,44],$Vl=[1,43],$Vm=[5,9,10,11,14,15,18,21,26,27,34,35,37,39,40,41,43,53,54,57],$Vn=[1,45],$Vo=[1,46],$Vp=[2,38],$Vq=[1,54],$Vr=[5,9,10,11,14,15,17,18,19,21,26,27,31,32,33,34,35,37,39,40,41,43,44,53,54,57],$Vs=[1,61],$Vt=[1,59],$Vu=[1,60],$Vv=[5,9,10,11,14,15,17,18,19,21,26,27,28,31,32,33,34,35,37,39,40,41,44,53,54,57],$Vw=[1,68],$Vx=[5,9,10,11,14,15,17,18,19,21,26,27,28,31,32,33,34,35,37,39,40,41,43,44,48,53,54,57],$Vy=[2,32],$Vz=[1,73],$VA=[1,75],$VB=[1,77],$VC=[1,78],$VD=[1,103],$VE=[17,19,44],$VF=[10,19],$VG=[1,106],$VH=[1,107],$VI=[1,108],$VJ=[1,109],$VK=[5,9,10,11,14,15,17,18,19,21,26,27,33,34,35,37,39,40,41,43,44,53,54,57],$VL=[1,112],$VM=[1,114],$VN=[1,115],$VO=[17,19];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"result":4,"EOF":5,"body":6,"func":7,"function":8,"{":9,"}":10,"NAME_SOFT":11,"=>":12,"right_part":13,"FUNC":14,"(":15,"arguments":16,")":17,"()":18,",":19,"line":20,"EOL":21,"assign":22,"if_condition":23,"with":24,"return":25,"RETURN":26,"VAR":27,"ASSIGN":28,"sequence":29,"simple_right_part":30,"BINARY":31,"?":32,":":33,"!":34,"TYPEOF":35,"value":36,"NUMBER":37,"process_string":38,"BOOLEAN":39,"NULL":40,"STRING":41,"array":42,"[":43,"]":44,"call_args":45,"right_part_value":46,"sequence_tail":47,".":48,"call":49,"obj":50,"objFields":51,"objField":52,"IF":53,"WITH":54,"if_part":55,"else_part":56,"ELSE":57,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"{",10:"}",11:"NAME_SOFT",12:"=>",14:"FUNC",15:"(",17:")",18:"()",19:",",21:"EOL",26:"RETURN",27:"VAR",28:"ASSIGN",31:"BINARY",32:"?",33:":",34:"!",35:"TYPEOF",37:"NUMBER",39:"BOOLEAN",40:"NULL",41:"STRING",43:"[",44:"]",48:".",53:"IF",54:"WITH",57:"ELSE"},
productions_: [0,[3,2],[4,1],[4,1],[7,4],[7,3],[7,5],[8,4],[8,2],[8,2],[16,1],[16,3],[6,1],[6,2],[6,2],[6,3],[20,1],[20,1],[20,1],[20,1],[20,1],[25,2],[22,4],[22,3],[13,1],[13,3],[13,5],[13,4],[13,3],[13,4],[13,1],[36,1],[36,1],[36,1],[36,1],[38,1],[42,2],[42,3],[30,1],[30,2],[30,2],[29,1],[29,2],[47,2],[47,2],[47,3],[47,4],[47,6],[47,3],[47,3],[47,4],[47,5],[47,7],[46,1],[46,1],[46,1],[46,1],[46,1],[49,2],[49,4],[45,1],[45,3],[50,3],[50,4],[50,2],[51,1],[51,3],[52,3],[52,3],[52,3],[52,3],[24,7],[23,1],[23,2],[55,5],[55,7],[56,2],[56,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 3: case 16: case 17: case 18: case 19: case 20: case 24: case 30:
 this.$ = $$[$0]; 
break;
case 4:
 this.$ = { body: $$[$0-1], args: $$[$0-3].args, type: 'func' }; 
break;
case 5:
 this.$ = { body: [$$[$0]], args: [$$[$0-2]], type: 'func' }; 
break;
case 6:
 this.$ = { body: $$[$0-1], args: [$$[$0-4]], type: 'func' }; 
break;
case 7:
 this.$ = { args: $$[$0-1] }; 
break;
case 8: case 9:
 this.$ = { args: [] }; 
break;
case 10: case 12: case 60: case 65:
 this.$ = [$$[$0]]; 
break;
case 11: case 61: case 66:
 this.$ = [].concat($$[$0-2], [$$[$0]]); 
break;
case 13:
 this.$ = [].concat([$$[$0-1]], $$[$0]); 
break;
case 14:
 this.$ = [$$[$0-1]]; 
break;
case 15:
 this.$ = [].concat([$$[$0-2]], $$[$0]); 
break;
case 21:
 this.$ = { value: $$[$0], type: 'return' }; 
break;
case 22:
 this.$ = { assignTo: [{ name: $$[$0-2], type: 'context'}], value: $$[$0], type: 'assign' }; 
break;
case 23:
 this.$ = { assignTo: $$[$0-2].operands, value: $$[$0], type: 'assign' }; 
break;
case 25:
 this.$ = { left: $$[$0-2], right: $$[$0], operation: $$[$0-1], type: 'binary' }; 
break;
case 26:
 this.$ = { type: 'if', true: $$[$0-2], condition: $$[$0-4], false: $$[$0] }; 
break;
case 27:
 this.$ = { type: 'not', value: $$[$0-1] } 
break;
case 28:
 this.$ = $$[$0-1]; 
break;
case 29:
 this.$ = { type: 'typeof', value: $$[$0-1] } 
break;
case 31:
 this.$ = parseFloat($$[$0]); 
break;
case 32: case 38:
 this.$ = $$[$0] 
break;
case 33:
 this.$ = $$[$0] === 'true' 
break;
case 34:
 this.$ = null; 
break;
case 35:
 this.$ = $$[$0].substring(1, $$[$0].length - 1); 
break;
case 36:
 this.$ = { type: 'array', values: [] }; 
break;
case 37:
 this.$ = { type: 'array', values: $$[$0-1] }; 
break;
case 39:
 this.$ = { type: 'not', value: $$[$0] } 
break;
case 40:
 this.$ = { type: 'typeof', value: $$[$0] } 
break;
case 41:
 this.$ = { operands: $$[$0], type: 'sequence' } 
break;
case 42:
 this.$ = { operands: [].concat($$[$0-1], $$[$0]), type: 'sequence' } 
break;
case 43: case 53:
 this.$ = [{ name: $$[$0], type: 'context' }]; 
break;
case 44: case 55: case 56: case 57:
 this.$ = [$$[$0]] 
break;
case 45:
 this.$ = [{ name: $$[$0-1], type: 'context' }] 
break;
case 46:
 this.$ = [{ func: $$[$0-2], args: [], type: 'call' }]; 
break;
case 47:
 this.$ = [{ func: $$[$0-4], args: $$[$0-1], type: 'call' }]; 
break;
case 48:
 this.$ = [].concat($$[$0-2],[{ name: $$[$0], type: 'context' }]); 
break;
case 49:
 this.$ = [].concat($$[$0-2],[$$[$0]]); 
break;
case 50:
 this.$ = [].concat($$[$0-3], { name: $$[$0-1], type: 'context' }); 
break;
case 51:
 this.$ = [].concat($$[$0-4],[{ func: $$[$0-2], args: [], type: 'call' }]); 
break;
case 52:
 this.$ = [].concat($$[$0-6],[{ func: $$[$0-4], args: $$[$0-1], type: 'call' }]); 
break;
case 54:
 this.$ = [{ value: $$[$0], type: 'value' }] 
break;
case 58:
 this.$ = { func: $$[$0-1], args: [], type: 'call' }; 
break;
case 59:
 this.$ = { func: $$[$0-3], args: $$[$0-1], type: 'call' }; 
break;
case 62:
 this.$ = { fields: $$[$0-1], type: 'obj' }; 
break;
case 63:
 this.$ = { fields: $$[$0-2], type: 'obj' }; 
break;
case 64:
 this.$ = { fields: [], type: 'obj' }; 
break;
case 67: case 68:
 this.$ = { name: $$[$0-2], value: $$[$0] }; 
break;
case 69:
 this.$ = { name: 'if', value: $$[$0] }; 
break;
case 70:
 this.$ = { name: 'with', value: $$[$0] }; 
break;
case 71:
 this.$ = { type: 'with', context: $$[$0-4], body: $$[$0-1] }; 
break;
case 72:
 this.$ = { type: 'if', condition: $$[$0].condition, true: $$[$0].true, false: [] } 
break;
case 73:
 this.$ = { type: 'if', condition: $$[$0-1].condition, true: $$[$0-1].true, false: $$[$0].false } 
break;
case 74:
 this.$ = { type: 'if', condition: $$[$0-2], true: [$$[$0]], false: [] } 
break;
case 75:
 this.$ = { type: 'if', condition: $$[$0-4], true: $$[$0-1], false: [] } 
break;
case 76:
 this.$ = { false: [$$[$0]] } 
break;
case 77:
 this.$ = { false: $$[$0-1] } 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:6,9:$V0,11:$V1,13:12,14:$V2,15:$V3,18:$V4,20:5,22:8,23:9,24:10,25:11,26:$V5,27:$V6,29:16,30:20,34:$V7,35:$V8,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29,53:$Ve,54:$Vf,55:17},{1:[3]},{5:[1,37]},{5:[2,2]},o([5,9,11,14,15,18,21,26,27,31,32,34,35,37,39,40,41,43,53,54],[2,3]),o($Vg,[2,12],{20:5,8:6,22:8,23:9,24:10,25:11,13:12,29:16,55:17,30:20,46:24,36:26,49:27,42:28,50:29,38:31,6:38,7:40,9:$V0,11:$V1,14:$V2,15:$V3,18:$V4,21:[1,39],26:$V5,27:$V6,34:$V7,35:$V8,37:$V9,39:$Va,40:$Vb,41:$Vc,43:$Vd,53:$Ve,54:$Vf}),{9:[1,41]},o($Vh,$Vi,{12:$Vj,15:$Vk,18:$Vl}),o($Vm,[2,16]),o($Vm,[2,17]),o($Vm,[2,18]),o($Vm,[2,19]),o($Vm,[2,20],{31:$Vn,32:$Vo}),{15:[1,47],18:[1,48]},{12:[1,49]},{11:[1,50]},o([5,9,10,11,14,15,18,21,26,27,31,32,34,35,37,39,40,41,43,53,54,57],$Vp,{28:[1,51]}),o([5,9,10,11,14,15,18,21,26,27,34,35,37,39,40,41,43,53,54],[2,72],{56:52,57:[1,53]}),{15:$Vq},{7:40,8:6,9:$V0,11:$V1,13:55,14:$V2,15:$V3,18:$V4,29:56,30:20,34:$V7,35:$V8,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29},o($Vr,[2,24]),{9:$V0,11:$Vs,15:[1,57],29:56,30:58,34:$Vt,35:$Vu,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29},{7:40,8:6,9:$V0,11:$V1,13:62,14:$V2,15:$V3,18:$V4,29:56,30:20,34:$V7,35:$V8,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29},{9:$V0,11:$Vs,15:[1,63],29:64,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29},o($Vv,[2,41],{47:65,43:[1,67],48:[1,66]}),{15:$Vw},o($Vx,[2,54]),o($Vx,[2,55]),o($Vx,[2,56]),o($Vx,[2,57]),o($Vx,[2,31]),o($Vx,$Vy),o($Vx,[2,33]),o($Vx,[2,34]),{7:40,8:6,9:$V0,11:$V1,13:71,14:$V2,15:$V3,18:$V4,29:56,30:20,34:$V7,35:$V8,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,44:[1,69],45:70,46:24,49:27,50:29},{10:$Vz,11:$VA,38:76,41:$Vc,51:72,52:74,53:$VB,54:$VC},o($Vx,[2,35]),{1:[2,1]},o($Vg,[2,13]),o($Vg,[2,14],{20:5,8:6,22:8,23:9,24:10,25:11,13:12,29:16,55:17,30:20,46:24,36:26,49:27,42:28,50:29,38:31,7:40,6:79,9:$V0,11:$V1,14:$V2,15:$V3,18:$V4,26:$V5,27:$V6,34:$V7,35:$V8,37:$V9,39:$Va,40:$Vb,41:$Vc,43:$Vd,53:$Ve,54:$Vf}),o($Vr,[2,30]),{6:80,7:40,8:6,9:$V0,11:$V1,13:12,14:$V2,15:$V3,18:$V4,20:5,22:8,23:9,24:10,25:11,26:$V5,27:$V6,29:16,30:20,34:$V7,35:$V8,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29,53:$Ve,54:$Vf,55:17},{7:40,8:6,9:[1,82],11:$V1,13:81,14:$V2,15:$V3,18:$V4,29:56,30:20,34:$V7,35:$V8,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29},o($Vx,[2,58]),{7:40,8:6,9:$V0,11:$V1,13:71,14:$V2,15:$V3,18:$V4,29:56,30:20,34:$V7,35:$V8,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,45:83,46:24,49:27,50:29},{7:40,8:6,9:$V0,11:$V1,13:84,14:$V2,15:$V3,18:$V4,29:56,30:20,34:$V7,35:$V8,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29},{7:40,8:6,9:$V0,11:$V1,13:85,14:$V2,15:$V3,18:$V4,29:56,30:20,34:$V7,35:$V8,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29},{11:[1,87],16:86},{9:[2,8]},{9:[2,9]},{28:[1,88]},{7:40,8:6,9:$V0,11:$V1,13:89,14:$V2,15:$V3,18:$V4,29:56,30:20,34:$V7,35:$V8,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29},o($Vm,[2,73]),{7:40,8:6,9:[1,91],11:$V1,13:12,14:$V2,15:$V3,18:$V4,20:90,22:8,23:9,24:10,25:11,26:$V5,27:$V6,29:16,30:20,34:$V7,35:$V8,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29,53:$Ve,54:$Vf,55:17},{7:40,8:6,9:$V0,11:$V1,13:92,14:$V2,15:$V3,18:$V4,29:56,30:20,34:$V7,35:$V8,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29},o($Vm,[2,21],{31:$Vn,32:$Vo}),o($Vr,$Vp),{7:40,8:6,9:$V0,11:$V1,13:93,14:$V2,15:$V3,18:$V4,29:56,30:20,34:$V7,35:$V8,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29},o($Vr,[2,39]),{9:$V0,11:$Vs,29:56,30:58,34:$Vt,35:$Vu,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29},{9:$V0,11:$Vs,29:64,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29},o([5,9,10,11,14,17,19,21,26,27,31,32,33,34,35,37,39,40,41,43,44,48,53,54,57],$Vi,{15:$Vk,18:$Vl}),{17:[1,94],31:$Vn,32:$Vo},{7:40,8:6,9:$V0,11:$V1,13:95,14:$V2,15:$V3,18:$V4,29:56,30:20,34:$V7,35:$V8,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29},o($Vr,[2,40]),o($Vv,[2,42],{43:[1,97],48:[1,96]}),{11:[1,98],49:99},{7:40,8:6,9:$V0,11:$V1,13:100,14:$V2,15:$V3,18:$V4,29:56,30:20,34:$V7,35:$V8,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29},{7:40,8:6,9:$V0,11:$V1,13:101,14:$V2,15:$V3,18:$V4,29:56,30:20,34:$V7,35:$V8,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29},o($Vx,[2,36]),{19:$VD,44:[1,102]},o($VE,[2,60],{31:$Vn,32:$Vo}),{10:[1,104],19:[1,105]},o($Vx,[2,64]),o($VF,[2,65]),{33:$VG},{33:$VH},{33:$VI},{33:$VJ},o($Vg,[2,15]),{10:[1,110]},o($VK,[2,5],{31:$Vn,32:$Vo}),{6:111,7:40,8:6,9:$V0,10:$Vz,11:$VL,13:12,14:$V2,15:$V3,18:$V4,20:5,22:8,23:9,24:10,25:11,26:$V5,27:$V6,29:16,30:20,34:$V7,35:$V8,36:26,37:$V9,38:113,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29,51:72,52:74,53:$VM,54:$VN,55:17},{17:[1,116],19:$VD},o($Vr,[2,25]),{31:$Vn,32:$Vo,33:[1,117]},{17:[1,118],19:[1,119]},o($VO,[2,10]),{7:40,8:6,9:$V0,11:$V1,13:120,14:$V2,15:$V3,18:$V4,29:56,30:20,34:$V7,35:$V8,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29},o($Vm,[2,23],{31:$Vn,32:$Vo}),o($Vm,[2,76]),{6:121,7:40,8:6,9:$V0,10:$Vz,11:$VL,13:12,14:$V2,15:$V3,18:$V4,20:5,22:8,23:9,24:10,25:11,26:$V5,27:$V6,29:16,30:20,34:$V7,35:$V8,36:26,37:$V9,38:113,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29,51:72,52:74,53:$VM,54:$VN,55:17},{17:[1,122],31:$Vn,32:$Vo},{17:[1,123],31:$Vn,32:$Vo},o($Vr,[2,28]),{17:[1,124],31:$Vn,32:$Vo},{11:[1,125],49:126},{7:40,8:6,9:$V0,11:$V1,13:127,14:$V2,15:$V3,18:$V4,29:56,30:20,34:$V7,35:$V8,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29},o($Vh,[2,43],{15:$Vk,18:$Vl}),o($Vx,[2,44]),{31:$Vn,32:$Vo,44:[1,128]},{17:[1,129],31:$Vn,32:$Vo},o($Vx,[2,37]),{7:40,8:6,9:$V0,11:$V1,13:130,14:$V2,15:$V3,18:$V4,29:56,30:20,34:$V7,35:$V8,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29},o($Vx,[2,62]),{10:[1,131],11:$VA,38:76,41:$Vc,52:132,53:$VB,54:$VC},{7:40,8:6,9:$V0,11:$V1,13:133,14:$V2,15:$V3,18:$V4,29:56,30:20,34:$V7,35:$V8,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29},{7:40,8:6,9:$V0,11:$V1,13:134,14:$V2,15:$V3,18:$V4,29:56,30:20,34:$V7,35:$V8,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29},{7:40,8:6,9:$V0,11:$V1,13:135,14:$V2,15:$V3,18:$V4,29:56,30:20,34:$V7,35:$V8,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29},{7:40,8:6,9:$V0,11:$V1,13:136,14:$V2,15:$V3,18:$V4,29:56,30:20,34:$V7,35:$V8,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29},o($Vr,[2,4]),{10:[1,137]},o([9,10,11,14,21,26,27,28,31,32,34,35,37,39,40,41,43,48,53,54],$Vi,{12:$Vj,15:$Vk,18:$Vl,33:$VG}),o([9,10,11,14,15,18,21,26,27,28,31,32,34,35,37,39,40,41,43,48,53,54],$Vy,{33:$VH}),{15:$Vw,33:$VI},{15:$Vq,33:$VJ},o($Vx,[2,59]),{7:40,8:6,9:$V0,11:$V1,13:138,14:$V2,15:$V3,18:$V4,29:56,30:20,34:$V7,35:$V8,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29},{9:[2,7]},{11:[1,139]},o($Vm,[2,22],{31:$Vn,32:$Vo}),{10:[1,140]},{9:[1,141]},o($Vr,[2,27]),o($Vr,[2,29]),o($Vh,[2,48],{15:$Vk,18:$Vl}),o($Vx,[2,49]),{31:$Vn,32:$Vo,44:[1,142]},o($Vh,[2,45],{15:[1,144],18:[1,143]}),{7:40,8:6,9:[1,146],11:$V1,13:12,14:$V2,15:$V3,18:$V4,20:145,22:8,23:9,24:10,25:11,26:$V5,27:$V6,29:16,30:20,34:$V7,35:$V8,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29,53:$Ve,54:$Vf,55:17},o($VE,[2,61],{31:$Vn,32:$Vo}),o($Vx,[2,63]),o($VF,[2,66]),o($VF,[2,67],{31:$Vn,32:$Vo}),o($VF,[2,68],{31:$Vn,32:$Vo}),o($VF,[2,69],{31:$Vn,32:$Vo}),o($VF,[2,70],{31:$Vn,32:$Vo}),o($Vr,[2,6]),o($VK,[2,26],{31:$Vn,32:$Vo}),o($VO,[2,11]),o($Vm,[2,77]),{6:147,7:40,8:6,9:$V0,11:$V1,13:12,14:$V2,15:$V3,18:$V4,20:5,22:8,23:9,24:10,25:11,26:$V5,27:$V6,29:16,30:20,34:$V7,35:$V8,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29,53:$Ve,54:$Vf,55:17},o($Vh,[2,50],{15:[1,149],18:[1,148]}),o($Vx,[2,46]),{7:40,8:6,9:$V0,11:$V1,13:71,14:$V2,15:$V3,18:$V4,29:56,30:20,34:$V7,35:$V8,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,45:150,46:24,49:27,50:29},o($Vm,[2,74]),{6:151,7:40,8:6,9:$V0,10:$Vz,11:$VL,13:12,14:$V2,15:$V3,18:$V4,20:5,22:8,23:9,24:10,25:11,26:$V5,27:$V6,29:16,30:20,34:$V7,35:$V8,36:26,37:$V9,38:113,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,46:24,49:27,50:29,51:72,52:74,53:$VM,54:$VN,55:17},{10:[1,152]},o($Vx,[2,51]),{7:40,8:6,9:$V0,11:$V1,13:71,14:$V2,15:$V3,18:$V4,29:56,30:20,34:$V7,35:$V8,36:26,37:$V9,38:31,39:$Va,40:$Vb,41:$Vc,42:28,43:$Vd,45:153,46:24,49:27,50:29},{17:[1,154],19:$VD},{10:[1,155]},o($Vm,[2,71]),{17:[1,156],19:$VD},o($Vx,[2,47]),o($Vm,[2,75]),o($Vx,[2,52])],
defaultActions: {3:[2,2],37:[2,1],48:[2,8],49:[2,9],118:[2,7]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 41
break;
case 2:return 37
break;
case 3:return 39
break;
case 4:return 39
break;
case 5:return 40
break;
case 6:return 40
break;
case 7:return 27
break;
case 8:return 26
break;
case 9:return 21
break;
case 10:return 18
break;
case 11:return 15
break;
case 12:return 17
break;
case 13:return 14
break;
case 14:return 35
break;
case 15:return 54
break;
case 16:return 53
break;
case 17:return 57
break;
case 18:return 19
break;
case 19:return 48
break;
case 20:return 12
break;
case 21:return 9
break;
case 22:return 10
break;
case 23:return 43
break;
case 24:return 44
break;
case 25:return 33
break;
case 26:return 32
break;
case 27:return 31
break;
case 28:return 31
break;
case 29:return 31
break;
case 30:return 31
break;
case 31:return 31
break;
case 32:return 31
break;
case 33:return 31
break;
case 34:return 31
break;
case 35:return 31
break;
case 36:return 31
break;
case 37:return 31
break;
case 38:return 31
break;
case 39:return 31
break;
case 40:return 31
break;
case 41:return 28
break;
case 42:return 34
break;
case 43:return 11
break;
case 44:return 5
break;
}
},
rules: [/^(?:\s+)/i,/^(?:'(?:[^\']|(?:('')))*')/i,/^(?:[0-9]+(\.[0-9]+([mfMF]{1})?|[bsiluBSILU]{1})?)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:null\b)/i,/^(?:undefined\b)/i,/^(?:var\b)/i,/^(?:return\b)/i,/^(?:;)/i,/^(?:\(\))/i,/^(?:\()/i,/^(?:\))/i,/^(?:function\b)/i,/^(?:typeof\b)/i,/^(?:with\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:=>)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?::)/i,/^(?:\?)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:!==)/i,/^(?:!=)/i,/^(?:===)/i,/^(?:==)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:=)/i,/^(?:!)/i,/^(?:[\$_\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376-\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E-\u066F\u0671-\u06D3\u06D5\u06E5-\u06E6\u06EE-\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4-\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F-\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC-\u09DD\u09DF-\u09E1\u09F0-\u09F1\u0A05-\u0A0A\u0A0F-\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32-\u0A33\u0A35-\u0A36\u0A38-\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2-\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0-\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F-\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32-\u0B33\u0B35-\u0B39\u0B3D\u0B5C-\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99-\u0B9A\u0B9C\u0B9E-\u0B9F\u0BA3-\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60-\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0-\u0CE1\u0CF1-\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32-\u0E33\u0E40-\u0E46\u0E81-\u0E82\u0E84\u0E87-\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA-\u0EAB\u0EAD-\u0EB0\u0EB2-\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065-\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE-\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5-\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183-\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3006\u3031-\u3035\u303B-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A-\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5-\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40-\uFB41\uFB43-\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC][\d_\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376-\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E-\u066F\u0671-\u06D3\u06D5\u06E5-\u06E6\u06EE-\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4-\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F-\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC-\u09DD\u09DF-\u09E1\u09F0-\u09F1\u0A05-\u0A0A\u0A0F-\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32-\u0A33\u0A35-\u0A36\u0A38-\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2-\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0-\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F-\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32-\u0B33\u0B35-\u0B39\u0B3D\u0B5C-\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99-\u0B9A\u0B9C\u0B9E-\u0B9F\u0BA3-\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60-\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0-\u0CE1\u0CF1-\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32-\u0E33\u0E40-\u0E46\u0E81-\u0E82\u0E84\u0E87-\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA-\u0EAB\u0EAD-\u0EB0\u0EB2-\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065-\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE-\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5-\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183-\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3006\u3031-\u3035\u303B-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A-\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5-\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40-\uFB41\uFB43-\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]*)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = jsParser;
exports.Parser = jsParser.Parser;
exports.parse = function () { return jsParser.parse.apply(jsParser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}